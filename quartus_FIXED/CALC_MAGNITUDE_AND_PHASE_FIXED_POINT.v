// -------------------------------------------------------------
// 
// File Name: hdlsrc\Fixed\CALC_MAGNITUDE_AND_PHASE_FIXED_POINT.v
// Created: 2023-04-04 14:02:59
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// o_VALID                       ce_out        1
// o_MAGNITUDE                   ce_out        1
// o_PHASE                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: CALC_MAGNITUDE_AND_PHASE_FIXED_POINT
// Source Path: Fixed/CALC_MAGNITUDE_AND_PHASE_FIXED_POINT
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CALC_MAGNITUDE_AND_PHASE_FIXED_POINT
          (I_CLK,
           I_RST_N,
           I_CLK_EN,
           i_WALID,
           i_COMPLEX_VALUE_re,
           i_COMPLEX_VALUE_im,
           ce_out,
           o_VALID,
           o_MAGNITUDE,
           o_PHASE);


  input   I_CLK;
  input   I_RST_N;
  input   I_CLK_EN;
  input   i_WALID;
  input   signed [31:0] i_COMPLEX_VALUE_re;  // sfix32_En11
  input   signed [31:0] i_COMPLEX_VALUE_im;  // sfix32_En11
  output  ce_out;
  output  o_VALID;
  output  signed [32:0] o_MAGNITUDE;  // sfix33_En11
  output  signed [15:0] o_PHASE;  // sfix16_En13


  wire enb;
  reg  [0:53] delayMatch1_reg;  // ufix1 [54]
  wire [0:53] delayMatch1_reg_next;  // ufix1 [54]
  wire i_WALID_1;
  wire signed [63:0] Product_mul_temp;  // sfix64_En22
  wire signed [32:0] Product_out1;  // sfix33_En11
  wire signed [63:0] Product1_mul_temp;  // sfix64_En22
  wire signed [32:0] Product1_out1;  // sfix33_En11
  wire signed [33:0] Add_add_cast;  // sfix34_En11
  wire signed [33:0] Add_add_cast_1;  // sfix34_En11
  wire signed [33:0] Add_add_temp;  // sfix34_En11
  wire signed [32:0] Add_out1;  // sfix33_En11
  wire signed [32:0] Sqrt_out1;  // sfix33_En11
  reg signed [32:0] delayMatch2_reg [0:29];  // sfix33 [30]
  wire signed [32:0] delayMatch2_reg_next [0:29];  // sfix33_En11 [30]
  wire signed [32:0] Sqrt_out1_1;  // sfix33_En11
  wire [31:0] Data_Type_Conversion2_out1;  // ufix32
  wire [31:0] Data_Type_Conversion1_out1;  // ufix32
  wire [31:0] Atan2_out1;  // ufix32
  wire signed [15:0] Data_Type_Conversion3_out1;  // sfix16_En13


  assign enb = I_CLK_EN;

  always @(posedge I_CLK or negedge I_RST_N)
    begin : delayMatch1_process
      if (I_RST_N == 1'b0) begin
        delayMatch1_reg[0] <= 1'b0;
        delayMatch1_reg[1] <= 1'b0;
        delayMatch1_reg[2] <= 1'b0;
        delayMatch1_reg[3] <= 1'b0;
        delayMatch1_reg[4] <= 1'b0;
        delayMatch1_reg[5] <= 1'b0;
        delayMatch1_reg[6] <= 1'b0;
        delayMatch1_reg[7] <= 1'b0;
        delayMatch1_reg[8] <= 1'b0;
        delayMatch1_reg[9] <= 1'b0;
        delayMatch1_reg[10] <= 1'b0;
        delayMatch1_reg[11] <= 1'b0;
        delayMatch1_reg[12] <= 1'b0;
        delayMatch1_reg[13] <= 1'b0;
        delayMatch1_reg[14] <= 1'b0;
        delayMatch1_reg[15] <= 1'b0;
        delayMatch1_reg[16] <= 1'b0;
        delayMatch1_reg[17] <= 1'b0;
        delayMatch1_reg[18] <= 1'b0;
        delayMatch1_reg[19] <= 1'b0;
        delayMatch1_reg[20] <= 1'b0;
        delayMatch1_reg[21] <= 1'b0;
        delayMatch1_reg[22] <= 1'b0;
        delayMatch1_reg[23] <= 1'b0;
        delayMatch1_reg[24] <= 1'b0;
        delayMatch1_reg[25] <= 1'b0;
        delayMatch1_reg[26] <= 1'b0;
        delayMatch1_reg[27] <= 1'b0;
        delayMatch1_reg[28] <= 1'b0;
        delayMatch1_reg[29] <= 1'b0;
        delayMatch1_reg[30] <= 1'b0;
        delayMatch1_reg[31] <= 1'b0;
        delayMatch1_reg[32] <= 1'b0;
        delayMatch1_reg[33] <= 1'b0;
        delayMatch1_reg[34] <= 1'b0;
        delayMatch1_reg[35] <= 1'b0;
        delayMatch1_reg[36] <= 1'b0;
        delayMatch1_reg[37] <= 1'b0;
        delayMatch1_reg[38] <= 1'b0;
        delayMatch1_reg[39] <= 1'b0;
        delayMatch1_reg[40] <= 1'b0;
        delayMatch1_reg[41] <= 1'b0;
        delayMatch1_reg[42] <= 1'b0;
        delayMatch1_reg[43] <= 1'b0;
        delayMatch1_reg[44] <= 1'b0;
        delayMatch1_reg[45] <= 1'b0;
        delayMatch1_reg[46] <= 1'b0;
        delayMatch1_reg[47] <= 1'b0;
        delayMatch1_reg[48] <= 1'b0;
        delayMatch1_reg[49] <= 1'b0;
        delayMatch1_reg[50] <= 1'b0;
        delayMatch1_reg[51] <= 1'b0;
        delayMatch1_reg[52] <= 1'b0;
        delayMatch1_reg[53] <= 1'b0;
      end
      else begin
        if (enb) begin
          delayMatch1_reg[0] <= delayMatch1_reg_next[0];
          delayMatch1_reg[1] <= delayMatch1_reg_next[1];
          delayMatch1_reg[2] <= delayMatch1_reg_next[2];
          delayMatch1_reg[3] <= delayMatch1_reg_next[3];
          delayMatch1_reg[4] <= delayMatch1_reg_next[4];
          delayMatch1_reg[5] <= delayMatch1_reg_next[5];
          delayMatch1_reg[6] <= delayMatch1_reg_next[6];
          delayMatch1_reg[7] <= delayMatch1_reg_next[7];
          delayMatch1_reg[8] <= delayMatch1_reg_next[8];
          delayMatch1_reg[9] <= delayMatch1_reg_next[9];
          delayMatch1_reg[10] <= delayMatch1_reg_next[10];
          delayMatch1_reg[11] <= delayMatch1_reg_next[11];
          delayMatch1_reg[12] <= delayMatch1_reg_next[12];
          delayMatch1_reg[13] <= delayMatch1_reg_next[13];
          delayMatch1_reg[14] <= delayMatch1_reg_next[14];
          delayMatch1_reg[15] <= delayMatch1_reg_next[15];
          delayMatch1_reg[16] <= delayMatch1_reg_next[16];
          delayMatch1_reg[17] <= delayMatch1_reg_next[17];
          delayMatch1_reg[18] <= delayMatch1_reg_next[18];
          delayMatch1_reg[19] <= delayMatch1_reg_next[19];
          delayMatch1_reg[20] <= delayMatch1_reg_next[20];
          delayMatch1_reg[21] <= delayMatch1_reg_next[21];
          delayMatch1_reg[22] <= delayMatch1_reg_next[22];
          delayMatch1_reg[23] <= delayMatch1_reg_next[23];
          delayMatch1_reg[24] <= delayMatch1_reg_next[24];
          delayMatch1_reg[25] <= delayMatch1_reg_next[25];
          delayMatch1_reg[26] <= delayMatch1_reg_next[26];
          delayMatch1_reg[27] <= delayMatch1_reg_next[27];
          delayMatch1_reg[28] <= delayMatch1_reg_next[28];
          delayMatch1_reg[29] <= delayMatch1_reg_next[29];
          delayMatch1_reg[30] <= delayMatch1_reg_next[30];
          delayMatch1_reg[31] <= delayMatch1_reg_next[31];
          delayMatch1_reg[32] <= delayMatch1_reg_next[32];
          delayMatch1_reg[33] <= delayMatch1_reg_next[33];
          delayMatch1_reg[34] <= delayMatch1_reg_next[34];
          delayMatch1_reg[35] <= delayMatch1_reg_next[35];
          delayMatch1_reg[36] <= delayMatch1_reg_next[36];
          delayMatch1_reg[37] <= delayMatch1_reg_next[37];
          delayMatch1_reg[38] <= delayMatch1_reg_next[38];
          delayMatch1_reg[39] <= delayMatch1_reg_next[39];
          delayMatch1_reg[40] <= delayMatch1_reg_next[40];
          delayMatch1_reg[41] <= delayMatch1_reg_next[41];
          delayMatch1_reg[42] <= delayMatch1_reg_next[42];
          delayMatch1_reg[43] <= delayMatch1_reg_next[43];
          delayMatch1_reg[44] <= delayMatch1_reg_next[44];
          delayMatch1_reg[45] <= delayMatch1_reg_next[45];
          delayMatch1_reg[46] <= delayMatch1_reg_next[46];
          delayMatch1_reg[47] <= delayMatch1_reg_next[47];
          delayMatch1_reg[48] <= delayMatch1_reg_next[48];
          delayMatch1_reg[49] <= delayMatch1_reg_next[49];
          delayMatch1_reg[50] <= delayMatch1_reg_next[50];
          delayMatch1_reg[51] <= delayMatch1_reg_next[51];
          delayMatch1_reg[52] <= delayMatch1_reg_next[52];
          delayMatch1_reg[53] <= delayMatch1_reg_next[53];
        end
      end
    end

  assign i_WALID_1 = delayMatch1_reg[53];
  assign delayMatch1_reg_next[0] = i_WALID;
  assign delayMatch1_reg_next[1] = delayMatch1_reg[0];
  assign delayMatch1_reg_next[2] = delayMatch1_reg[1];
  assign delayMatch1_reg_next[3] = delayMatch1_reg[2];
  assign delayMatch1_reg_next[4] = delayMatch1_reg[3];
  assign delayMatch1_reg_next[5] = delayMatch1_reg[4];
  assign delayMatch1_reg_next[6] = delayMatch1_reg[5];
  assign delayMatch1_reg_next[7] = delayMatch1_reg[6];
  assign delayMatch1_reg_next[8] = delayMatch1_reg[7];
  assign delayMatch1_reg_next[9] = delayMatch1_reg[8];
  assign delayMatch1_reg_next[10] = delayMatch1_reg[9];
  assign delayMatch1_reg_next[11] = delayMatch1_reg[10];
  assign delayMatch1_reg_next[12] = delayMatch1_reg[11];
  assign delayMatch1_reg_next[13] = delayMatch1_reg[12];
  assign delayMatch1_reg_next[14] = delayMatch1_reg[13];
  assign delayMatch1_reg_next[15] = delayMatch1_reg[14];
  assign delayMatch1_reg_next[16] = delayMatch1_reg[15];
  assign delayMatch1_reg_next[17] = delayMatch1_reg[16];
  assign delayMatch1_reg_next[18] = delayMatch1_reg[17];
  assign delayMatch1_reg_next[19] = delayMatch1_reg[18];
  assign delayMatch1_reg_next[20] = delayMatch1_reg[19];
  assign delayMatch1_reg_next[21] = delayMatch1_reg[20];
  assign delayMatch1_reg_next[22] = delayMatch1_reg[21];
  assign delayMatch1_reg_next[23] = delayMatch1_reg[22];
  assign delayMatch1_reg_next[24] = delayMatch1_reg[23];
  assign delayMatch1_reg_next[25] = delayMatch1_reg[24];
  assign delayMatch1_reg_next[26] = delayMatch1_reg[25];
  assign delayMatch1_reg_next[27] = delayMatch1_reg[26];
  assign delayMatch1_reg_next[28] = delayMatch1_reg[27];
  assign delayMatch1_reg_next[29] = delayMatch1_reg[28];
  assign delayMatch1_reg_next[30] = delayMatch1_reg[29];
  assign delayMatch1_reg_next[31] = delayMatch1_reg[30];
  assign delayMatch1_reg_next[32] = delayMatch1_reg[31];
  assign delayMatch1_reg_next[33] = delayMatch1_reg[32];
  assign delayMatch1_reg_next[34] = delayMatch1_reg[33];
  assign delayMatch1_reg_next[35] = delayMatch1_reg[34];
  assign delayMatch1_reg_next[36] = delayMatch1_reg[35];
  assign delayMatch1_reg_next[37] = delayMatch1_reg[36];
  assign delayMatch1_reg_next[38] = delayMatch1_reg[37];
  assign delayMatch1_reg_next[39] = delayMatch1_reg[38];
  assign delayMatch1_reg_next[40] = delayMatch1_reg[39];
  assign delayMatch1_reg_next[41] = delayMatch1_reg[40];
  assign delayMatch1_reg_next[42] = delayMatch1_reg[41];
  assign delayMatch1_reg_next[43] = delayMatch1_reg[42];
  assign delayMatch1_reg_next[44] = delayMatch1_reg[43];
  assign delayMatch1_reg_next[45] = delayMatch1_reg[44];
  assign delayMatch1_reg_next[46] = delayMatch1_reg[45];
  assign delayMatch1_reg_next[47] = delayMatch1_reg[46];
  assign delayMatch1_reg_next[48] = delayMatch1_reg[47];
  assign delayMatch1_reg_next[49] = delayMatch1_reg[48];
  assign delayMatch1_reg_next[50] = delayMatch1_reg[49];
  assign delayMatch1_reg_next[51] = delayMatch1_reg[50];
  assign delayMatch1_reg_next[52] = delayMatch1_reg[51];
  assign delayMatch1_reg_next[53] = delayMatch1_reg[52];



  assign o_VALID = i_WALID_1;

  assign Product_mul_temp = i_COMPLEX_VALUE_re * i_COMPLEX_VALUE_re;
  assign Product_out1 = (((Product_mul_temp[63] == 1'b0) && (Product_mul_temp[62:43] != 20'b00000000000000000000)) || ((Product_mul_temp[63] == 1'b0) && (Product_mul_temp[43:11] == 33'sh0FFFFFFFF)) ? 33'sh0FFFFFFFF :
              ((Product_mul_temp[63] == 1'b1) && (Product_mul_temp[62:43] != 20'b11111111111111111111) ? 33'sh100000000 :
              Product_mul_temp[43:11] + $signed({1'b0, Product_mul_temp[10] & (( ~ Product_mul_temp[63]) | (|Product_mul_temp[9:0]))})));



  assign Product1_mul_temp = i_COMPLEX_VALUE_im * i_COMPLEX_VALUE_im;
  assign Product1_out1 = (((Product1_mul_temp[63] == 1'b0) && (Product1_mul_temp[62:43] != 20'b00000000000000000000)) || ((Product1_mul_temp[63] == 1'b0) && (Product1_mul_temp[43:11] == 33'sh0FFFFFFFF)) ? 33'sh0FFFFFFFF :
              ((Product1_mul_temp[63] == 1'b1) && (Product1_mul_temp[62:43] != 20'b11111111111111111111) ? 33'sh100000000 :
              Product1_mul_temp[43:11] + $signed({1'b0, Product1_mul_temp[10] & (( ~ Product1_mul_temp[63]) | (|Product1_mul_temp[9:0]))})));



  assign Add_add_cast = {Product_out1[32], Product_out1};
  assign Add_add_cast_1 = {Product1_out1[32], Product1_out1};
  assign Add_add_temp = Add_add_cast + Add_add_cast_1;
  assign Add_out1 = ((Add_add_temp[33] == 1'b0) && (Add_add_temp[32] != 1'b0) ? 33'sh0FFFFFFFF :
              ((Add_add_temp[33] == 1'b1) && (Add_add_temp[32] != 1'b1) ? 33'sh100000000 :
              $signed(Add_add_temp[32:0])));



  Sqrt u_Sqrt (.I_CLK(I_CLK),
               .I_RST_N(I_RST_N),
               .enb(I_CLK_EN),
               .din(Add_out1),  // sfix33_En11
               .dout(Sqrt_out1)  // sfix33_En11
               );

  always @(posedge I_CLK or negedge I_RST_N)
    begin : delayMatch2_process
      if (I_RST_N == 1'b0) begin
        delayMatch2_reg[0] <= 33'sh000000000;
        delayMatch2_reg[1] <= 33'sh000000000;
        delayMatch2_reg[2] <= 33'sh000000000;
        delayMatch2_reg[3] <= 33'sh000000000;
        delayMatch2_reg[4] <= 33'sh000000000;
        delayMatch2_reg[5] <= 33'sh000000000;
        delayMatch2_reg[6] <= 33'sh000000000;
        delayMatch2_reg[7] <= 33'sh000000000;
        delayMatch2_reg[8] <= 33'sh000000000;
        delayMatch2_reg[9] <= 33'sh000000000;
        delayMatch2_reg[10] <= 33'sh000000000;
        delayMatch2_reg[11] <= 33'sh000000000;
        delayMatch2_reg[12] <= 33'sh000000000;
        delayMatch2_reg[13] <= 33'sh000000000;
        delayMatch2_reg[14] <= 33'sh000000000;
        delayMatch2_reg[15] <= 33'sh000000000;
        delayMatch2_reg[16] <= 33'sh000000000;
        delayMatch2_reg[17] <= 33'sh000000000;
        delayMatch2_reg[18] <= 33'sh000000000;
        delayMatch2_reg[19] <= 33'sh000000000;
        delayMatch2_reg[20] <= 33'sh000000000;
        delayMatch2_reg[21] <= 33'sh000000000;
        delayMatch2_reg[22] <= 33'sh000000000;
        delayMatch2_reg[23] <= 33'sh000000000;
        delayMatch2_reg[24] <= 33'sh000000000;
        delayMatch2_reg[25] <= 33'sh000000000;
        delayMatch2_reg[26] <= 33'sh000000000;
        delayMatch2_reg[27] <= 33'sh000000000;
        delayMatch2_reg[28] <= 33'sh000000000;
        delayMatch2_reg[29] <= 33'sh000000000;
      end
      else begin
        if (enb) begin
          delayMatch2_reg[0] <= delayMatch2_reg_next[0];
          delayMatch2_reg[1] <= delayMatch2_reg_next[1];
          delayMatch2_reg[2] <= delayMatch2_reg_next[2];
          delayMatch2_reg[3] <= delayMatch2_reg_next[3];
          delayMatch2_reg[4] <= delayMatch2_reg_next[4];
          delayMatch2_reg[5] <= delayMatch2_reg_next[5];
          delayMatch2_reg[6] <= delayMatch2_reg_next[6];
          delayMatch2_reg[7] <= delayMatch2_reg_next[7];
          delayMatch2_reg[8] <= delayMatch2_reg_next[8];
          delayMatch2_reg[9] <= delayMatch2_reg_next[9];
          delayMatch2_reg[10] <= delayMatch2_reg_next[10];
          delayMatch2_reg[11] <= delayMatch2_reg_next[11];
          delayMatch2_reg[12] <= delayMatch2_reg_next[12];
          delayMatch2_reg[13] <= delayMatch2_reg_next[13];
          delayMatch2_reg[14] <= delayMatch2_reg_next[14];
          delayMatch2_reg[15] <= delayMatch2_reg_next[15];
          delayMatch2_reg[16] <= delayMatch2_reg_next[16];
          delayMatch2_reg[17] <= delayMatch2_reg_next[17];
          delayMatch2_reg[18] <= delayMatch2_reg_next[18];
          delayMatch2_reg[19] <= delayMatch2_reg_next[19];
          delayMatch2_reg[20] <= delayMatch2_reg_next[20];
          delayMatch2_reg[21] <= delayMatch2_reg_next[21];
          delayMatch2_reg[22] <= delayMatch2_reg_next[22];
          delayMatch2_reg[23] <= delayMatch2_reg_next[23];
          delayMatch2_reg[24] <= delayMatch2_reg_next[24];
          delayMatch2_reg[25] <= delayMatch2_reg_next[25];
          delayMatch2_reg[26] <= delayMatch2_reg_next[26];
          delayMatch2_reg[27] <= delayMatch2_reg_next[27];
          delayMatch2_reg[28] <= delayMatch2_reg_next[28];
          delayMatch2_reg[29] <= delayMatch2_reg_next[29];
        end
      end
    end

  assign Sqrt_out1_1 = delayMatch2_reg[29];
  assign delayMatch2_reg_next[0] = Sqrt_out1;
  assign delayMatch2_reg_next[1] = delayMatch2_reg[0];
  assign delayMatch2_reg_next[2] = delayMatch2_reg[1];
  assign delayMatch2_reg_next[3] = delayMatch2_reg[2];
  assign delayMatch2_reg_next[4] = delayMatch2_reg[3];
  assign delayMatch2_reg_next[5] = delayMatch2_reg[4];
  assign delayMatch2_reg_next[6] = delayMatch2_reg[5];
  assign delayMatch2_reg_next[7] = delayMatch2_reg[6];
  assign delayMatch2_reg_next[8] = delayMatch2_reg[7];
  assign delayMatch2_reg_next[9] = delayMatch2_reg[8];
  assign delayMatch2_reg_next[10] = delayMatch2_reg[9];
  assign delayMatch2_reg_next[11] = delayMatch2_reg[10];
  assign delayMatch2_reg_next[12] = delayMatch2_reg[11];
  assign delayMatch2_reg_next[13] = delayMatch2_reg[12];
  assign delayMatch2_reg_next[14] = delayMatch2_reg[13];
  assign delayMatch2_reg_next[15] = delayMatch2_reg[14];
  assign delayMatch2_reg_next[16] = delayMatch2_reg[15];
  assign delayMatch2_reg_next[17] = delayMatch2_reg[16];
  assign delayMatch2_reg_next[18] = delayMatch2_reg[17];
  assign delayMatch2_reg_next[19] = delayMatch2_reg[18];
  assign delayMatch2_reg_next[20] = delayMatch2_reg[19];
  assign delayMatch2_reg_next[21] = delayMatch2_reg[20];
  assign delayMatch2_reg_next[22] = delayMatch2_reg[21];
  assign delayMatch2_reg_next[23] = delayMatch2_reg[22];
  assign delayMatch2_reg_next[24] = delayMatch2_reg[23];
  assign delayMatch2_reg_next[25] = delayMatch2_reg[24];
  assign delayMatch2_reg_next[26] = delayMatch2_reg[25];
  assign delayMatch2_reg_next[27] = delayMatch2_reg[26];
  assign delayMatch2_reg_next[28] = delayMatch2_reg[27];
  assign delayMatch2_reg_next[29] = delayMatch2_reg[28];



  assign o_MAGNITUDE = Sqrt_out1_1;

  nfp_convert_sfix_32_En11_to_single u_Fixed_CALC_MAGNITUDE_AND_PHASE_FIXED_POINT_nfp_convert_sfix_32_En11_to_single (.I_CLK(I_CLK),
                                                                                                                      .I_RST_N(I_RST_N),
                                                                                                                      .enb(I_CLK_EN),
                                                                                                                      .nfp_in(i_COMPLEX_VALUE_im),  // sfix32_En11
                                                                                                                      .nfp_out(Data_Type_Conversion2_out1)  // single
                                                                                                                      );

  nfp_convert_sfix_32_En11_to_single u_Fixed_CALC_MAGNITUDE_AND_PHASE_FIXED_POINT_nfp_convert_sfix_32_En11_to_single_1 (.I_CLK(I_CLK),
                                                                                                                        .I_RST_N(I_RST_N),
                                                                                                                        .enb(I_CLK_EN),
                                                                                                                        .nfp_in(i_COMPLEX_VALUE_re),  // sfix32_En11
                                                                                                                        .nfp_out(Data_Type_Conversion1_out1)  // single
                                                                                                                        );

  nfp_atan2_single u_nfp_atan2_comp (.I_CLK(I_CLK),
                                     .I_RST_N(I_RST_N),
                                     .enb(I_CLK_EN),
                                     .nfp_in1(Data_Type_Conversion2_out1),  // single
                                     .nfp_in2(Data_Type_Conversion1_out1),  // single
                                     .nfp_out(Atan2_out1)  // single
                                     );

  nfp_convert_single_to_sfix_16_En13 u_Fixed_CALC_MAGNITUDE_AND_PHASE_FIXED_POINT_nfp_convert_single_to_sfix_16_En13 (.I_CLK(I_CLK),
                                                                                                                      .I_RST_N(I_RST_N),
                                                                                                                      .enb(I_CLK_EN),
                                                                                                                      .nfp_in(Atan2_out1),  // single
                                                                                                                      .nfp_out(Data_Type_Conversion3_out1)  // sfix16_En13
                                                                                                                      );

  assign o_PHASE = Data_Type_Conversion3_out1;

  assign ce_out = I_CLK_EN;

endmodule  // CALC_MAGNITUDE_AND_PHASE_FIXED_POINT

